import { ApiBase } from './runtime'

{{#definitions}}
  {{#tsType}}
  {{^isObject}}export type {{&typeName}} = {{> type}}{{/isObject}}
  {{#isObject}}export interface {{&typeName}} {{> type}}{{/isObject}}
  {{/tsType}};
{{/definitions}}

{{#apis}}
  class {{className}} extends ApiBase {

  {{#methods}}
    /**
    * {{&summary}}
    *
    * {{&description}}
    *
    * @method
    * @name {{&className}}#{{&name}}
    {{#pathParameters}}
    * @param {{=<% %>=}}{<%&typeName%>}<%={{ }}=%> {{&name}} - {{&type.description}}
    {{/pathParameters}}
    {{#queryParameters}}
    * @param {{=<% %>=}}{<%&typeName%>}<%={{ }}=%> {{&name}} - {{&type.description}}
    {{/queryParameters}}
    {{#bodyParameters}}
    * @param {{=<% %>=}}{<%&typeName%>}<%={{ }}=%> {{&name}} - {{&type.description}}
    {{/bodyParameters}}
    */
    {{&name}} (
    {{#pathParameters}}
      {{name}}{{cardinality}}: {{#type}}{{> type}}{{/type}},
    {{/pathParameters}}
    {{#hasQueryParameters}}
      parameters: {
      {{#queryParameters}}
        {{name}}{{cardinality}}: {{#type}}{{> type}}{{/type}},
      {{/queryParameters}}
      },
    {{/hasQueryParameters}}
    {{#bodyParameters}}
      {{name}}{{cardinality}}: {{#type}}{{> type}}{{/type}},
    {{/bodyParameters}}
    ): Promise<
    {{#responseType}}
      {{> type}}
    {{/responseType}}
    > {
    let path = `{{{formatString}}}`
    return super.call('{{httpMethod}}', path,
    {{#hasQueryParameters}}
      parameters
    {{/hasQueryParameters}}
    {{^hasQueryParameters}}
      undefined
    {{/hasQueryParameters}},
    {{#hasBodyParameters}}
      {{#bodyParameters}}
        {{name}}
      {{/bodyParameters}}
    {{/hasBodyParameters}}
    {{^hasBodyParameters}}
      undefined
    {{/hasBodyParameters}}
    , {
    {{#options}}
      {{name}}: {{value}}
    {{/options}}
    })
    }
  {{/methods}}
  }
{{/apis}}

export class Api {

{{#apis}}
  {{api}}: {{className}}
{{/apis}}

/**
* @param {object} options
* + token - OAuth2 token
* + host - API endpoint to connect to. The default is {{&host}}
* + timeout - HTTP timeout in ms. The default is 2000ms. Note that the `content.stream()` method will ignore this and always use timeout based on the `wait` parameter.
*/
constructor(options: { token?: string, host? :string, timeout?: number }) {
{{#apis}}
  this.{{api}} = new {{className}}({ host: '{{&host}}', timeout: 2000, ...options })
{{/apis}}
}

}
